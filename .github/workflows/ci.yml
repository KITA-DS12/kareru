name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      firestore:
        image: google/cloud-sdk:latest
        ports:
          - 8081:8081
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: cd backend && go mod download
      
    - name: Install and Start Firestore Emulator
      run: |
        # Install gcloud and firestore emulator
        curl https://sdk.cloud.google.com | bash > /dev/null
        source $HOME/google-cloud-sdk/path.bash.inc
        gcloud components install cloud-firestore-emulator --quiet
        # Start emulator in background
        gcloud emulators firestore start --host-port=localhost:8081 &
        # Wait for emulator to be ready
        sleep 15
        echo "Firestore emulator started on localhost:8081"
      env:
        CLOUDSDK_CORE_DISABLE_PROMPTS: 1
        
    - name: Run backend lint
      run: |
        cd backend
        go fmt ./...
        go vet ./...
        
    - name: Run backend tests
      run: cd backend && FIRESTORE_EMULATOR_HOST=localhost:8081 go test -v ./...
      
    - name: Build backend
      run: cd backend && go build -o bin/server cmd/server/main.go

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: cd frontend && npm ci
      
    - name: Run frontend lint
      run: cd frontend && npm run lint
      
    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage --watchAll=false
      
    - name: Build frontend
      run: cd frontend && npm run build

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build with Docker Compose
      run: docker-compose build
      
    - name: Start services with Docker Compose
      run: docker-compose up -d
      
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8080/health > /dev/null 2>&1; do sleep 2; done'
        
    - name: Run integration tests
      run: |
        # ヘルスチェックで基本的な統合テストを実行
        curl -f http://localhost:8080/health
        curl -f http://localhost:3000
        
    - name: Stop services
      run: docker-compose down